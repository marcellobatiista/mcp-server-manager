import os
import platform
import subprocess
from shutil import which
import datetime
import sys
import re

def find_python_paths():
    system = platform.system()
    python_paths = []

    if system == "Windows":
        try:
            output = subprocess.check_output("where python", shell=True, text=True, stderr=subprocess.DEVNULL)
            python_paths = [line.strip() for line in output.splitlines()]
        except subprocess.CalledProcessError:
            pass
    else:  # Linux / macOS
        possible_bins = ["python", "python3"]
        for bin_name in possible_bins:
            bin_path = which(bin_name)
            if bin_path and bin_path not in python_paths:
                python_paths.append(bin_path)

        for i in range(3, 13):
            bin_path = which(f"python3.{i}")
            if bin_path and bin_path not in python_paths:
                python_paths.append(bin_path)

    # Remove atalhos do Windows Store
    python_paths = [p for p in python_paths if "WindowsApps" not in p]

    return python_paths

def get_python_version(path):
    try:
        output = subprocess.check_output([path, "--version"], text=True, stderr=subprocess.STDOUT)
        return output.strip()
    except Exception:
        return None

def is_version_compatible(version_str):
    """Verifica se a vers√£o do Python √© 3.10 ou superior."""
    try:
        # Extrai o n√∫mero da vers√£o do formato "Python X.Y.Z"
        match = re.search(r"Python (\d+)\.(\d+)\.(\d+)", version_str)
        if match:
            major, minor, patch = map(int, match.groups())
            # Verifica se √© Python 3.10+
            return (major == 3 and minor >= 10) or major > 3
        return False
    except Exception:
        return False

def main():
    print("üîç Procurando instala√ß√µes do Python na sua m√°quina...\n")
    python_paths = find_python_paths()

    valid_paths = []
    compatible_paths = []
    
    for idx, path in enumerate(python_paths):
        version = get_python_version(path)
        if version:
            valid_paths.append((path, version))
            if is_version_compatible(version):
                compatible_paths.append((path, version))
    
    # Mostrar todas as vers√µes dispon√≠veis, mas marcar as compat√≠veis
    if valid_paths:
        print("Instala√ß√µes do Python encontradas:")
        for idx, (path, version) in enumerate(valid_paths):
            compatibility = "‚úÖ (compat√≠vel)" if is_version_compatible(version) else "‚ùå (n√£o compat√≠vel - requer 3.10+)"
            print(f"[{idx}] {version} ‚Üí {path} {compatibility}")
    
    if not valid_paths:
        print("‚ùå Nenhuma instala√ß√£o v√°lida do Python foi encontrada.")
        print("Por favor, instale o Python 3.10 ou superior antes de continuar.")
        print("Voc√™ pode baixar em: https://www.python.org/downloads/")
        sys.exit(1)
    
    if not compatible_paths:
        print("\n‚ùå Nenhuma vers√£o compat√≠vel do Python (3.10+) foi encontrada!")
        print("O MCP requer Python 3.10 ou superior para funcionar corretamente.")
        print("Por favor, instale o Python 3.10+ antes de continuar.")
        print("Voc√™ pode baixar em: https://www.python.org/downloads/")
        print("\nInstala√ß√£o interrompida.")
        sys.exit(1)
    
    try:
        if compatible_paths:
            print("\nüí° Recomendado: Escolha uma vers√£o marcada como compat√≠vel (Python 3.10+)")
        choice = int(input("\nüí° Escolha o n√∫mero da vers√£o onde deseja instalar o uv: "))
        selected_path, selected_version = valid_paths[choice]
        
        # Verificar se a vers√£o escolhida √© compat√≠vel
        if not is_version_compatible(selected_version):
            print(f"\n‚ùå Voc√™ escolheu {selected_version}, que n√£o √© compat√≠vel com MCP!")
            print("O MCP requer Python 3.10 ou superior para funcionar corretamente.")
            print("Por favor, instale o Python 3.10+ e tente novamente.")
            print("Voc√™ pode baixar em: https://www.python.org/downloads/")
            print("\nInstala√ß√£o interrompida.")
            sys.exit(1)
    except (ValueError, IndexError):
        print("‚ùå Escolha inv√°lida.")
        return

    print(f"\nüöÄ Instalando pipx com: {selected_path}")
    subprocess.run([selected_path, "-m", "pip", "install", "--user", "pipx"], check=True)
    subprocess.run([selected_path, "-m", "pipx", "ensurepath"], check=True)

    # Determinar o caminho do pipx com base na vers√£o do Python selecionada
    python_version = selected_path.split("Python")[-1].split("\\")[0]
    pipx_path = os.path.join(os.path.expanduser("~"), "AppData", "Roaming", "Python", f"Python{python_version}", "Scripts", "pipx.exe")
    
    print(f"\n‚ö° Instalando uv com essa vers√£o do Python...")
    print(f"Usando pipx em: {pipx_path}")
    
    # Usar o caminho completo do pipx ao inv√©s do comando simples
    try:
        subprocess.run([pipx_path, "install", "uv", "--python", selected_path, "--force"], check=True)
        print("\n‚úÖ Pronto! 'uv' instalado com sucesso.")
        
        # Criar arquivo de log com as informa√ß√µes da instala√ß√£o
        log_file_path = "log.txt"
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(log_file_path, "w", encoding="utf-8") as log_file:
            log_file.write(f"Data da instala√ß√£o: {timestamp}\n")
            log_file.write(f"Vers√£o do Python: {selected_version}\n")
            log_file.write(f"Caminho do Python: {selected_path}\n")
        
        print(f"\n‚ÑπÔ∏è Informa√ß√µes da instala√ß√£o salvas em '{log_file_path}'")
        
    except FileNotFoundError:
        print(f"\n‚ùå N√£o foi poss√≠vel encontrar o pipx em {pipx_path}")
        print("Alternativa: Tente instalar o uv usando:")
        print(f"{selected_path} -m pipx install uv --python {selected_path}")

if __name__ == "__main__":
    main()
